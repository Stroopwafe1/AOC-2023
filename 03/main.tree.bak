ui8[19750] s_buffer;

struct Number {
	ui64 value;
	ui32 start;
	ui32 length;
}

Number[1224] s_numbers;
ui16 s_numbers_size = 0;

void Part1(ui64 size) {
	// Double pass over input
	// First pass is parsing numbers
	// Second pass is checking symbols
	// When symbol found, iterate over 8 cardinalities and over numbers
	// If Number.start + length < cardinality and !Number.added, add to sum
	ui64 sum = 0;

	ui8[3] numBuffer = {0, 0, 0};
	ui8 buffLength = 0;

	ui32 lineLength = 0;
	loop i, 0..size {
		ui8 byte = s_buffer[i];
		if (byte >= '0') & (byte <= '9') {
			ui8 number = byte - '0';
			if buffLength == 0 {
				numBuffer[2] = number;
			} else if buffLength == 1 {
				numBuffer[1] = numBuffer[2];
				numBuffer[2] = number;
			} else {
				numBuffer[0] = numBuffer[1];
				numBuffer[1] = numBuffer[2];
				numBuffer[2] = number;
			}
			buffLength += 1;
		} else {
			if byte == '\n' {
				if lineLength == 0 {
					lineLength = i;
				}
			}
			if buffLength != 0 {
				ui64 number = ((numBuffer[0] * 100) + (numBuffer[1] * 10)) + numBuffer[2];
				s_numbers[s_numbers_size] = {number, i, buffLength - 1, false};
				s_numbers_size += 1;
				numBuffer = {0, 0, 0};
				buffLength = 0;
			}
		}
	};
	loop i, 0..size {
		ui8 byte = s_buffer[i];
		if ((byte >= '0') & (byte <= '9')) | ((byte == '.') | (byte == '\n')) {
			skip;
		}
		// Current byte is a symbol
		ui32[8] cardinalities = {(i - lineLength) - 1, i - lineLength, (i - lineLength) + 1, i - 1, i + 1, (i + lineLength) - 1, i + lineLength, (i + lineLength) + 1};
		loop j, 0..s_numbers_size {
			loop k, 0..8 {
				ui32 cardinality = cardinalities[k];
				if (cardinality >= (s_numbers[i].start)) & (cardinality <= ((s_numbers[i].start) + (s_numbers[i].length))) {
					sum += s_numbers[i].value;
					break;
				}
			}
		}
	}
	stdout.write("Sum part 1: ");
	stdout.writeln(sum);
}

ui8 Part2(ui64 size) {

	return 0;
}

ui8 main(cstring[] argv) {
	i32 fd = SYS_OPEN(argv[1], 0, 0);
	if (fd < 0) {
		stdout.writeln("Could not open file");
		return -1;
	}
	ui64 size = SYS_READ(fd, s_buffer, 19740);
	if (size == 0) {
		stdout.writeln("Could not read from file");
		return -1;
	}
	Part1(size);
	//Part2(size);
	return 0;
}
