ui8[13650] s_buffer;

/**
* Simple hash function
* Type determines if left, right, or bare (0, 1, 2) respectively
*/
ui32 Hash(ref<ui8> buff, ui8 type) {
	ui32 h = 5381;
	ref<ui8> buf = buff;
	ui8 t = type;
	loop i, 0..3 {
		ui8 byte = buf[i];
		h = ((h << 5) + h) + byte;
	}
	if t == 0 {
		h = ((h << 5) + h) + 'L';
	} else if t == 1 {
		h = ((h << 5) + h) + 'R';
	}
	return h;
}

ui64 GCD(ui64 a, ui64 b) {
	ui64 A = a;
	ui64 B = b;
    loop {
        ui64 t = B;
        B = A % B;
        A = t;
        if B == 0 {
			break;
        }
    }
    return A;
}

ui64 LCM(ui64 a, ui64 b) {
	ui64 A = a;
	ui64 B = b;
    ui64 c = A * B;
    return c / GCD(A, B);
}

ref<ui32> Part1(ui64 size) {
	bool parseInstructions = true;
	ui64 instructionSize = 0;
	ui64 length = size;
	ui8[3] source = {'A', 'A', 'A'};
	ui64 destOffset = 0;
	ref<ui32> hashBuffer = alloc(4 * 2147483647);

	loop i, 0..length {
		ui8 byte = s_buffer[i];
		if byte == '\n' {
			if parseInstructions {
				parseInstructions = false;
				i += 1;
			} else {
				ui32 leftIndexHash = Hash(((\s_buffer) + i) - 16, 0);
				ui32 rightIndexHash = Hash(((\s_buffer) + i) - 16, 1);
				if (hashBuffer[leftIndexHash] != 0) {
					stdout.writeln("Hash collission!!");
					SYS_WRITE(1, ((\s_buffer) + i) - 16, 3);
					stdout.write("L with ");
					SYS_WRITE(1, (\s_buffer) + hashBuffer[leftIndexHash], 3);
					stdout.writeln(" ");
					return 0;
				}
				if (hashBuffer[rightIndexHash] != 0) {
					stdout.writeln("Hash collission!!");
					SYS_WRITE(1, ((\s_buffer) + i) - 16, 3);
					stdout.write("R with ");
					SYS_WRITE(1, (\s_buffer) + hashBuffer[rightIndexHash], 3);
					stdout.writeln(" ");
					return 0;
				}
				hashBuffer[leftIndexHash] = i - 9;
				hashBuffer[rightIndexHash] = i - 4;
				if destOffset == 0 {
					if s_buffer[i - 9] == 'Z' {
						destOffset = i - 9;
					} else if s_buffer[i - 4] == 'Z' {
						destOffset = i - 4;
					}
				}
			}
		} else {
			if parseInstructions {
				instructionSize += 1;
			}
		}
	}

	ui64 steps = 0;
	ui8 instruction = s_buffer[steps % instructionSize];
	ui32 currHash = Hash(\source, instruction == 'R');
	steps += 1;

	loop {
		// if we found 'ZZZ' break
		ui32 offset = hashBuffer[currHash];
		if offset == destOffset {
			break;
		}
		instruction = s_buffer[steps % (instructionSize)];
		currHash = Hash((\s_buffer) + offset, instruction == 'R');
		steps += 1;
	}
	stdout.write("Number of steps part 1: ");
	stdout.writeln(steps);
	return hashBuffer;
}

ui8 Part2(ui64 size, ref<ui32> hashBuff) {
	ui64 length = size;
	ref<ui32> hashBuffer = hashBuff;
	ui64 instructionSize = 0;
	bool parseInstructions = true;
	ui64[6] sources = {0, 0, 0, 0, 0, 0};
	ui16 sourcesCount = 0;
	ui64[6] destinations = {0, 0, 0, 0, 0, 0};
	ui16 destinationsCount = 0;

	loop i, 0..length {
		ui8 byte = s_buffer[i];
		if byte == '\n' {
			if parseInstructions {
				parseInstructions = false;
				i += 1;
			} else {
				if s_buffer[i - 14] == 'A' {
					sources[sourcesCount] = i - 16;
					sourcesCount += 1;
				} else if s_buffer[i - 2] == 'Z' {
					destinations[destinationsCount] = i - 4;
					destinationsCount += 1;
				} else if s_buffer[i - 7] == 'Z' {
					destinations[destinationsCount] = i - 9;
					destinationsCount += 1;
				}
			}
		} else {
			if parseInstructions {
				instructionSize += 1;
			}
		}
	}

	ui64[6] steps = {0, 0, 0, 0, 0, 0};
	ui8 stepCount = 0;
	loop s, 0..sourcesCount {
		ui64 step = 0;
		ui8 instruction = s_buffer[step % instructionSize];
		ui32 currentHash = Hash((\s_buffer) + sources[s], instruction == 'R');
		step += 1;
		loop {
			ui32 offset = hashBuffer[currentHash];
			bool found = false;
			loop j, 0..destinationsCount {
				if offset == destinations[j] {
					found = true;
				}
			}
			if found {
				break;
			}
			instruction = s_buffer[step % (instructionSize)];
			currentHash = Hash((\s_buffer) + offset, instruction == 'R');
			step += 1;
		}
		steps[stepCount] = step;
		stepCount += 1;
	}
	ui64 lcm = steps[0];
	loop i, 1..stepCount {
		ui64 step = steps[i];
		lcm = LCM(lcm, step);
	}
	stdout.write("Number of steps part 2: ");
	stdout.writeln(lcm);

	dealloc(hashBuffer, 4 * 2147483647);
	return 0;
}

ui8 main(cstring[] argv) {
	i32 fd = SYS_OPEN(argv[1], 0, 0);
	if (fd < 0) {
		stdout.writeln("Could not open file");
		return -1;
	}
	ui64 size = SYS_READ(fd, \s_buffer, 13627);
	if (size == 0) {
		stdout.writeln("Could not read from file");
		return -1;
	}
	ref<ui32> buffer = Part1(size);
	Part2(size, buffer);
	return 0;
}
