ui8[21300] s_buffer;
ui16 s_direction = 0; // 0 up, 1 left, 2 right, 3 down

ui64 GetNext(ui64 source, ui64 lineLength) {
	if s_direction == 0 {
		if s_buffer[source] == '|' {
			s_direction = 0;
			return source - lineLength;
		} else if s_buffer[source] == '7' {
			s_direction = 1;
			return source - 1;
		} else if s_buffer[source] == 'F' {
			s_direction = 2;
			return source + 1;
		}
	} else if s_direction == 1 {
		if s_buffer[source] == '-' {
			s_direction = 1;
			return source - 1;
		} else if s_buffer[source] == 'L' {
			s_direction = 0;
			return source - lineLength;
		} else if s_buffer[source] == 'F' {
			s_direction = 3;
			return source + lineLength;
		}
	} else if s_direction == 2 {
		if s_buffer[source] == '-' {
			s_direction = 2;
			return source + 1;
		} else if s_buffer[source] == 'J' {
			s_direction = 0;
			return source - lineLength;
		} else if s_buffer[source] == '7' {
			s_direction = 3;
			return source + lineLength;
		}
	} else {
		if s_buffer[source] == '|' {
			s_direction = 3;
			return source + lineLength;
		} else if s_buffer[source] == 'L' {
			s_direction = 2;
			return source + 1;
		} else if s_buffer[source] == 'J' {
			s_direction = 1;
			return source - 1;
		}
	}
	return 0;
}

ui8 Part1(ui64 size) {
	ui64 length = size;
	ui64 sum = 0;
	ui64 lineLength = 0;
	ui64 next = 0;
	ui64 start = 0;
	/*
	Find S
	Check cardinalities if they connect to S
	Follow pipe to S, counting
	Longest is len / 2
	*/
	loop i, 0..length {
		ui8 byte = s_buffer[i];
		if byte == '\n' {
			if lineLength == 0 {
				lineLength = i + 1;
			}
		}
		if byte == 'S' {
			start = i;
			break;
		}
	}
	ui64[4] cardinalities = {start - lineLength, start - 1, start + 1, start + lineLength};
	stdout.write("Line length: ");
	stdout.writeln(lineLength);
	next = GetNext(cardinalities[s_direction], lineLength);
	loop {
		if next != 0 {
			break;
		}
		s_direction += 1;
		next = GetNext(cardinalities[s_direction], lineLength);
	}
	ui64 totalLength = 1;
	loop {
		if s_buffer[next] == 'S' {
			break;
		}
		next = GetNext(next, lineLength);
		totalLength += 1;
	}

	stdout.write("Furthest point part 1: ");
	ui64 furthestLength = (totalLength / 2) + 1;
	stdout.writeln(furthestLength);
	return 0;
}

ui8 Part2(ui64 size) {
	ui64 length = size;
	i64 sum = 0;

	return 0;
}

ui8 main(cstring[] argv) {
	i32 fd = SYS_OPEN(argv[1], 0, 0);
	if (fd < 0) {
		stdout.writeln("Could not open file");
		return -1;
	}
	ui64 size = SYS_READ(fd, \s_buffer, 21290);
	if (size == 0) {
		stdout.writeln("Could not read from file");
		return -1;
	}
	Part1(size);
	//Part2(size);
	return 0;
}
